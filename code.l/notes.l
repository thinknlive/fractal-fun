(for L (head 64 *History) (prinl L))
(sort (uniq (let (PBB (copy *PBB) Cnt 0) (make (mapc '((B) (cond ((=0 B) (inc 'Cnt)) (T (link Cnt) (setq Cnt 0)))) PBB)))))
(uniq (let (PBB (copy *PBB) Cnt 0) (make (mapc '((B) (cond ((=0 B) (inc 'Cnt)) (T (link Cnt) (setq Cnt 0)))) PBB))))
(let (PBB (copy *PBB) Cnt 0) (make (mapc '((B) (cond ((=0 B) (inc 'Cnt)) (T (link Cnt) (setq Cnt 0)))) PBB)))

(out "hilPB.bits" (prin *PBB))
(setq *PBB (let (ImgPB (copy *ImgPB)) (make (while ImgPB (if (= '(1 0) (head 2 ImgPB)) (prog (link 0) (cut 2 'ImgPB)) (prog (link (car ImgPB)) (cut 1 'ImgPB)))))))
(out "hilPB.bits" (prin *ImgPB))
(nil (ld) (setq *Img (plotit 512 0 0 '(() (if (< (rand 1 100) 51) 0 1)))) (sliceit))

(vi 'plotit)

(out "hilPB.bits" (prin *ImgPB))
(out "hilPB.bits" (prin *PBB))
(setq *PBB (let (ImgPB (copy *ImgPB)) (make (while ImgPB (if (= '(1 1 0) (head 3 ImgPB)) (prog (link 1) (cut 3 'ImgPB)) (prog (link (car ImgPB)) (cut 1 'ImgPB)))))))
(let (ImgPB (copy *ImgPB)) (make (while ImgPB (if (= '(1 1 0) (head 3 ImgPB)) (prog (link 1) (cut 3 'ImgPB)) (prog (link (car ImgPB)) (cut 1 'ImgPB))))))
(let (ImgPB (copy *ImgPB)) (while ImgPB (if (= '(1 1 0) (head 3 ImgPB)) (prog (prin 1) (cut 3 'ImgPB)) (prog (prin (car ImgPB)) (cut 1 'ImgPB)))))

(nil (setq *ImgPBB (make (map '((L) (if (= '(1 1 0) (head 3 L)) (link 1) (link (car L)))) *ImgPB))))

(nil (out "hilPB.bits" (prin *ImgPB)))
(nil (ld) (setq *Img (plotit 512 0 0 '(() (if (< (rand 1 100) 51) 0 1)))) (sliceit))

(vi 'plotit)
(nil (ld) (setq *Img (plotit 512 0 0 '(() (if (< (rand 1 100) 51) 0 1)))) (sliceit))
(vi 'plotit)

(setq *ImgLZW (lzwCompress *ImgBits))
(length (lzwCompress *ImgBits))
(length *ImgBits)
(nil (in "hil.bits" (setq *ImgBits (make (while (char) (link @))))))
(quit)
(in "hil.bits" (setq *ImgBits (make (while (char) (link @)))))
(head 32 (lzwCompress *ImgPB))
(length (lzwCompress *ImgPB))
(= *ImgPB (lzwDecompress (lzwCompress *ImgPB)))
(head 32 *ImgPB)
(nil (ld) (setq *Img (plotit 512 0 0 '(() (if (< (rand 1 100) 51) 0 1)))) (sliceit))
(vi 'plotit)
(nil (bytes (lzwCompress *ImgPB)))
(bytes (length (lzwCompress *ImgPB)))
(length (lzwCompress *ImgPB))
(lzwCompress *ImgPB)
(de lzwDecompress (Lst)
(de lzwCompress (Lst)
(nil (ld) (setq *Img (plotit 512 0 0 '(() (if (< (rand 1 100) 51) 0 1)))) (sliceit))
